model = models.efficientnet_v2_m(weights="EfficientNet_V2_M_Weights.DEFAULT")

# Freeze all layers initially
#for param in model.parameters():
#    param.requires_grad = False

#block4_section1 = getattr(model.trunk_output.block4, 'block4-1')
#block4_section1.requires_grad_(True)
# Freeze most of the model parameters but unfreeze some layers
for param in model.features.parameters():
    param.requires_grad = False
    
# Unfreeze the last few layers of the features
for param in model.features[-5:].parameters():  
    param.requires_grad = True



model.classifier = nn.Sequential(
        nn.Flatten(),
        nn.Dropout(p=0.5, inplace=True), 
        nn.Linear(in_features=1280, out_features=256, bias=True),  
        nn.BatchNorm1d(256),  
        nn.ReLU(),  
        nn.Linear(in_features=256, out_features=2, bias=True)  
    ).to(device)

model.to(device)
