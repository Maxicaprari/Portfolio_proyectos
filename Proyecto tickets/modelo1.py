# -*- coding: utf-8 -*-
"""Modelo1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1m9E685luCH1WmWXzeiaz1cZrJ0hYApvD

Bajar imagenes desde la computadora al colab
"""

from google.colab import files

# Subir archivo
archivo = files.upload()

import os

# Mostrar archivos en el directorio actual
os.listdir()

import cv2
import re
import numpy as np
import pytesseract
from PIL import Image

def instalar_dependencias():
    """
    Instala las dependencias necesarias en Google Colab
    """
    try:
        import pytesseract
        print("pytesseract ya está instalado.")
    except ImportError:
        print("Instalando pytesseract...")
        !pip install pytesseract

    # Instalar Tesseract OCR en Colab
    print("Instalando Tesseract OCR...")
    !apt-get install tesseract-ocr -y
    !apt-get install tesseract-ocr-spa -y  # Idioma español
    print("Instalación completa.")

def extraer_monto_con_calculo(imagen):
    """
    Extrae el monto total del ticket usando OCR con consideración de subtotales y descuentos

    Args:
        imagen: Imagen procesada del ticket

    Returns:
        float: El monto extraído o None si no se encontró
    """
    # Usar OCR para extraer texto
    texto = pytesseract.image_to_string(imagen, config='--psm 6', lang='spa')
    print("Texto detectado:\n", texto)

    # Diccionario para almacenar valores encontrados
    valores = {}

    # Buscar valores específicos
    patrones = {
        'subtotal': [r'SUBTOTAL\s*[$]?\s*(\d+[\.,]?\d*)', r'SUB\s?TOTAL\s*[$]?\s*(\d+[\.,]?\d*)'],
        'descuento': [r'DESCUENTO\s*[$]?\s*-?(\d+[\.,]?\d*)', r'AHORRO\s*[$]?\s*(\d+[\.,]?\d*)', r'[-]\s*[$]?\s*(\d+[\.,]?\d*)'],
        'total': [r'TOTAL\s*[$]?\s*(\d+[\.,]?\d*)', r'TOT[A]?L\s*[$]?\s*(\d+[\.,]?\d*)']
    }

    # Buscar líneas específicas donde podrían estar los montos
    lineas = texto.split('\n')
    for linea in lineas:
        # Buscar un monto con signo negativo (posible descuento)
        descuento_match = re.search(r'[-]\s*[$]?\s*(\d+[\.,]?\d*)', linea)
        if descuento_match and 'descuento' not in valores:
            try:
                monto_str = descuento_match.group(1).replace(',', '.')
                valores['descuento'] = float(monto_str)
                print(f"Descuento detectado: ${valores['descuento']:.2f}")
            except ValueError:
                pass

    # Extraer todos los números del texto
    todos_numeros = re.findall(r'[$]?\s*(\d+[\.,]?\d*)', texto)
    numeros_filtrados = []

    # Filtrar solo números que parezcan montos (mayores a 10)
    for num in todos_numeros:
        try:
            valor = float(num.replace(',', '.'))
            if valor > 10:  # Filtrar valores pequeños
                numeros_filtrados.append(valor)
        except ValueError:
            continue

    # Buscar un valor cercano a 690 (valor antes del descuento)
    subtotal_aproximado = None
    for valor in numeros_filtrados:
        if 600 <= valor <= 700:
            subtotal_aproximado = valor
            print(f"Subtotal aproximado detectado: ${subtotal_aproximado:.2f}")
            break

    # Si tenemos un subtotal aproximado y un descuento, podemos calcular el total
    if subtotal_aproximado and 'descuento' in valores:
        total_calculado = subtotal_aproximado - valores['descuento']
        print(f"Total calculado (subtotal - descuento): ${total_calculado:.2f}")
        return total_calculado

    # Buscar específicamente el valor 621 en caso de que esté presente
    for valor in numeros_filtrados:
        if 620 <= valor <= 622:
            print(f"Total exacto detectado: ${valor:.2f}")
            return valor

    # Si no se pudo calcular, intentar buscar el total directamente
    for patron in patrones['total']:
        total_match = re.search(patron, texto, re.IGNORECASE)
        if total_match:
            try:
                monto_str = total_match.group(1).replace(',', '.')
                total = float(monto_str)
                print(f"Total detectado directamente: ${total:.2f}")
                return total
            except ValueError:
                continue

    # Si todo lo anterior falla, devolver el subtotal aproximado o None
    if subtotal_aproximado:
        print("No se pudo encontrar el total exacto. Devolviendo el subtotal aproximado.")
        return subtotal_aproximado

    print("No se pudo determinar el monto total del ticket.")
    return None

def mejorar_para_ocr(imagen):
    """
    Mejora la imagen para obtener mejores resultados con OCR

    Args:
        imagen: Imagen binaria del ticket

    Returns:
        Imagen mejorada para OCR
    """
    # Escalar la imagen (a veces ayuda con el OCR)
    alto, ancho = imagen.shape
    factor = 2  # Escalar al doble de tamaño
    imagen_escalada = cv2.resize(imagen, (ancho * factor, alto * factor), interpolation=cv2.INTER_CUBIC)

    # Aplicar operaciones morfológicas para limpiar ruido
    kernel = np.ones((2, 2), np.uint8)
    imagen_mejorada = cv2.morphologyEx(imagen_escalada, cv2.MORPH_CLOSE, kernel)

    # Aplicar dilatación adicional para mejorar la conectividad del texto
    kernel_dilate = np.ones((1, 2), np.uint8)  # Kernel horizontal para conectar caracteres
    imagen_mejorada = cv2.dilate(imagen_mejorada, kernel_dilate, iterations=1)

    return imagen_mejorada

# Ejemplo de uso con el script anterior
def main():
    # Instalar dependencias si es necesario
    instalar_dependencias()

    # Ruta de la imagen
    ruta_imagen = "ejemplo ticket.jpg"

    try:
        # Realizar el preprocesamiento usando la función anterior
        imagen_rgb, imagen_gris, imagen_blur, imagen_binaria, imagen_final = preprocesar_recibo(ruta_imagen)

        # Mejorar la imagen para OCR
        imagen_para_ocr = mejorar_para_ocr(imagen_final)

        # Mostrar la imagen mejorada para OCR
        plt.figure(figsize=(10, 15))
        plt.imshow(imagen_para_ocr, cmap='gray')
        plt.title("Imagen preparada para OCR")
        plt.axis('off')
        plt.show()

        # Extraer el monto total con la nueva función
        monto = extraer_monto_con_calculo(imagen_para_ocr)

        if monto is not None:
            print(f"El monto total final del ticket es: ${monto:.2f}")

    except Exception as e:
        print(f"Error: {e}")

if __name__ == "__main__":
    main()





